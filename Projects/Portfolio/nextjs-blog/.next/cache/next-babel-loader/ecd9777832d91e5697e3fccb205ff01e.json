{"ast":null,"code":"// import fs from \"fs\";\n// import path from \"path\";\n// import matter from \"gray-matter\";\n// import remark from \"remark\";\n// import html from \"remark-html\";\n// const postsDirectory = path.join(process.cwd(), \"posts\");\n// export function getSortedPostsData() {\n//   // Get file names under /posts\n//   const fileNames = fs.readdirSync(postsDirectory);\n//   const allPostsData = fileNames.map((fileName) => {\n//     // Remove \".md\" from file name to get id\n//     const id = fileName.replace(/\\.md$/, \"\");\n//     // Read markdown file as string\n//     const fullPath = path.join(postsDirectory, fileName);\n//     const fileContents = fs.readFileSync(fullPath, \"utf8\");\n//     // Use gray-matter to parse the post metadata section\n//     const matterResult = matter(fileContents);\n//     // Combine the data with the id\n//     return {\n//       id,\n//       ...matterResult.data,\n//     };\n//   });\n//   // Sort posts by date\n//   return allPostsData.sort((a, b) => {\n//     if (a.date < b.date) {\n//       return 1;\n//     } else {\n//       return -1;\n//     }\n//   });\n// }\n// export function getAllPostIds() {\n//   const fileNames = fs.readdirSync(postsDirectory);\n//   /**\n//    * returns an array that looks like this:\n//    * [\n//    *   {\n//    *        params:{\n//    *             id: 'ssg-ssr'\n//    *        }\n//    *   {,\n//    *   {\n//    *        params: {\n//    *             id: 'pre-rendering'\n//    *        }\n//    *   }\n//    * ]\n//    */\n//   return fileNames.map((fileName) => {\n//     return {\n//       params: {\n//         id: fileName.replace(/\\.md$/, \"\"),\n//       },\n//     };\n//   });\n// }\n// export async function getPostData(id) {\n//   const fullPath = path.join(postsDirectory, `${id}.md`);\n//   const fileContents = fs.readFileSync(fullPath, \"utf8\");\n//   // Use gray-matter to parse the post metadata section\n//   const matterResult = matter(fileContents);\n//   // Use remark to convert markdown into html string\n//   const processedContent = await remark()\n//     .use(html)\n//     .process(matterResult.content);\n//   const contentHtml = processedContent.toString();\n//   // Combine the data with the id\n//   return {\n//     id,\n//     contentHtml,\n//     ...matterResult.data,\n//   };\n// }","map":{"version":3,"sources":["C:/Users/Adel/Documents/GitHub/Sandbox/Projects/Portfolio/nextjs-blog/posts.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import fs from \"fs\";\r\n// import path from \"path\";\r\n// import matter from \"gray-matter\";\r\n// import remark from \"remark\";\r\n// import html from \"remark-html\";\r\n\r\n// const postsDirectory = path.join(process.cwd(), \"posts\");\r\n\r\n// export function getSortedPostsData() {\r\n//   // Get file names under /posts\r\n//   const fileNames = fs.readdirSync(postsDirectory);\r\n//   const allPostsData = fileNames.map((fileName) => {\r\n//     // Remove \".md\" from file name to get id\r\n//     const id = fileName.replace(/\\.md$/, \"\");\r\n\r\n//     // Read markdown file as string\r\n//     const fullPath = path.join(postsDirectory, fileName);\r\n//     const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n\r\n//     // Use gray-matter to parse the post metadata section\r\n//     const matterResult = matter(fileContents);\r\n\r\n//     // Combine the data with the id\r\n//     return {\r\n//       id,\r\n//       ...matterResult.data,\r\n//     };\r\n//   });\r\n//   // Sort posts by date\r\n//   return allPostsData.sort((a, b) => {\r\n//     if (a.date < b.date) {\r\n//       return 1;\r\n//     } else {\r\n//       return -1;\r\n//     }\r\n//   });\r\n// }\r\n\r\n// export function getAllPostIds() {\r\n//   const fileNames = fs.readdirSync(postsDirectory);\r\n\r\n//   /**\r\n//    * returns an array that looks like this:\r\n//    * [\r\n//    *   {\r\n//    *        params:{\r\n//    *             id: 'ssg-ssr'\r\n//    *        }\r\n//    *   {,\r\n//    *   {\r\n//    *        params: {\r\n//    *             id: 'pre-rendering'\r\n//    *        }\r\n//    *   }\r\n//    * ]\r\n//    */\r\n//   return fileNames.map((fileName) => {\r\n//     return {\r\n//       params: {\r\n//         id: fileName.replace(/\\.md$/, \"\"),\r\n//       },\r\n//     };\r\n//   });\r\n// }\r\n\r\n// export async function getPostData(id) {\r\n//   const fullPath = path.join(postsDirectory, `${id}.md`);\r\n//   const fileContents = fs.readFileSync(fullPath, \"utf8\");\r\n\r\n//   // Use gray-matter to parse the post metadata section\r\n//   const matterResult = matter(fileContents);\r\n\r\n//   // Use remark to convert markdown into html string\r\n//   const processedContent = await remark()\r\n//     .use(html)\r\n//     .process(matterResult.content);\r\n//   const contentHtml = processedContent.toString();\r\n\r\n//   // Combine the data with the id\r\n//   return {\r\n//     id,\r\n//     contentHtml,\r\n//     ...matterResult.data,\r\n//   };\r\n// }\r\n"]},"metadata":{},"sourceType":"script"}